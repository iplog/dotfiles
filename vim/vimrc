" Reset vim  to vim-defaults
if &compatible          " only if not set before:
  set nocompatible      " use vim-defaults instead of vi-defaults (easier, more user friendly)
endif


call plug#begin('~/.vim/plugged') " Required!
" Navigation and utils
" Plug 'qpkorr/vim-bufkill'
" Plug 'ctrlpvim/ctrlp.vim'
Plug '/usr/local/opt/fzf'
Plug 'junegunn/fzf.vim'

Plug 'majutsushi/tagbar'
Plug 'tpope/vim-vinegar'
Plug 'sjl/vitality.vim'
" Edition
Plug 'mattn/emmet-vim'
Plug 'scrooloose/nerdcommenter'
Plug 'sdanielf/vim-stdtabs'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-repeat'
" Code completion and check
" Plug 'Valloric/YouCompleteMe', { 'do': './install.sh' }
" Plug 'Shougo/neocomplcache.vim'
" Plug 'marijnh/tern_for_vim', { 'do': 'npm install' }
Plug 'scrooloose/syntastic'
Plug 'mtscout6/syntastic-local-eslint.vim'
Plug 'tpope/vim-projectionist'
" UI
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'iplog/vim-popsicles'
Plug 'nathanaelkane/vim-indent-guides'
" Syntax
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'ap/vim-css-color'
Plug 'digitaltoad/vim-jade'
Plug 'elzr/vim-json'
Plug 'groenewege/vim-less'
Plug 'heavenshell/vim-jsdoc'
Plug 'kchmck/vim-coffee-script'
Plug 'nono/vim-handlebars'
Plug 'othree/html5.vim'
Plug 'pangloss/vim-javascript'
Plug 'smerrill/vcl-vim-plugin'
Plug 'wavded/vim-stylus'
Plug 'mxw/vim-jsx'
Plug 'vim-erlang/vim-erlang-compiler'
Plug 'vim-erlang/vim-erlang-runtime'
Plug 'vim-erlang/vim-erlang-omnicomplete'
Plug 'vim-erlang/vim-erlang-skeletons'
Plug 'elixir-editors/vim-elixir'
Plug 'ambv/black'
Plug 'mhinz/vim-mix-format'
Plug 'flowtype/vim-flow', {
  \ 'autoload': {
  \   'filetypes': 'javascript'
  \ }}
" Language tools
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
" Misc
Plug 'vim-scripts/scratch.vim'
Plug 'mrtazz/simplenote.vim'
Plug 'takac/vim-hardtime'
Plug 'rizzatti/dash.vim'

call plug#end() " Required!

" Enable filetypes. required!
filetype on
filetype plugin on
filetype indent on
syntax on

" Color settings (if terminal/gui supports it)
if $TERM =~ '256color' || $TERM =~ '^xterm$'
  set t_Co=256
endif

if &t_Co > 2 || has("gui_running")
  syntax on          " enable colors
  set hlsearch       " highlight search (very useful!)
  set incsearch      " search incremently (search while typing)
endif

" Display settings
set background=dark     " enable for dark terminals
set scrolloff=2         " 2 lines above/below cursor when scrolling
set number              " show the current line real number
set relativenumber      " show relative line numbers
set showmode            " show mode in status bar (insert/replace/...)
set showcmd             " show typed command in status bar
set ruler               " show cursor position in status bar
set title               " show file in titlebar
set wildmenu            " completion with menu
set wildignore=*.o,*.obj,*.bak,*.exe,*.py[co],*.swp,*~,*.pyc,.svn,.git
set laststatus=2        " use 2 lines for the status bar
set matchtime=2         " show matching bracket for 0.2 seconds
set showmatch           " show matching bracket (briefly jump)
set matchpairs+=<:>     " specially for html
set cursorline          " Higlight the current line

" Color Scheme
colorscheme popsicles

" Editor settings
set colorcolumn=80      " Colum lenght
set esckeys             " map missed escape sequences (enables keypad keys)
set autoindent smartindent      " turn on auto/smart indenting
set smarttab            " smart tab handling for indenting
set magic               " change the way backslashes are used in search patterns
set backspace=indent,eol,start " Allow backspacing over everything in insert mode
set list                " show invisibles
set tabstop=2           " number of spaces a tab counts for
set shiftwidth=2        " spaces for autoindents
set expandtab           " turn a tabs into spaces
set undolevels=10000             " number of forgivable mistakes
set updatecount=100             " write swap file to disk every 100 chars
"set complete=.,w,b,u,U,t,i,d    " do lots of scanning on tab completion
set timeoutlen=3000
set fileformat=unix     " file mode is unix
"set fileformats=unix,dos    " only detect unix file format, displays that ^M with dos files
set diffopt=filler,iwhite       " ignore all whitespace and sync
" set autowrite       "Write the old file out when switching between files.

" Encoding
set encoding=utf-8
set fileencoding=utf-8

" Better line wrapping
set wrap
set textwidth=79
set formatoptions=qrn1

" Enable code folding
set foldenable

" Search options
set ignorecase
set hlsearch
set incsearch
set showmatch
set smartcase           " but become case sensitive if you type uppercase characters

" System settings
set lazyredraw          " no redraws in macros
set confirm             " get a dialog when :q, :w, or :wq fails
"set viminfo=%100,'100,/100,h,\"500,:100,n~/.vim/viminfo
set viminfo='20,\"500   " remember copy registers after quitting in the .viminfo file -- 20 jump links, regs up to 500 lines'
set hidden              " remember undo after quitting
set history=50          " keep 50 lines of command history
set mouse=a             " use mouse in all modes
set mousehide           "Hide mouse when typing
" set splitright          " the new window is created on the right

" Share OS clipboard
set clipboard=unnamed

" Characters list incrementation
set nrformats+=alpha

" Backups
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap// " swap files
set undodir=~/.vim/tmp/undo// " undo files
set backup " enable backup
set undofile " enable undo

" Auto file reloading
set autoread
if !has('gui_running')
  " working thanks to vitality plugin and `set -g focus-events on` in tmux conf
  autocmd FocusGained,BufEnter * :silent! checktime
endif

" File type specifics
" All Trim trailing whitespace when saving a document
autocmd BufWritePre *\(.md\|.diff\)\@<! :%s/\s\+$//e
" Less
autocmd BufEnter *.less set filetype=less
" Handlebars
autocmd BufEnter *.hjs set filetype=handlebars
" Git
autocmd Filetype gitcommit setlocal spell textwidth=72
" Python
autocmd BufWritePost *.py execute ':Black'
let g:black_linelength = 88

" markdown
augroup markdownSpell
  autocmd!
  autocmd FileType markdown setlocal spell
  autocmd BufRead,BufNewFile *.md setlocal spell
augroup END

" Custom commands
" System
nmap <leader>ev :tabedit $MYVIMRC<cr>

" Ag
if executable('ag') && !exists(':Ag')
  set grepprg=ag  " Use ag over grep
  let g:grep_cmd_opts = '--nocolor --line-numbers --noheading'

  command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!
  nmap <Leader>f :Ag<Space>
  nmap <Leader>F :Ag '\b<C-R><C-W>\b'
endif

" ctags
if executable('ctags') && !exists(':MakeTags')
  command! MakeTags !ctags -R .
  nmap <Leader>mt :MakeTags<CR>
endif

" Plugins configuration and shortcuts
" Airline
let g:airline_left_sep = ''
let g:airline_right_sep = ''
let g:airline#extensions#csv#enabled = 0
let g:airline#extensions#syntastic#enabled = 0
let g:airline_theme = 'base16'
set noshowmode

" Ctrlp
" nmap <Leader>t :CtrlP<CR>
" nmap <Leader>o :CtrlPBuffer<CR>
" nmap <Leader>T :CtrlPClearCache<CR>:CtrlP<CR>
" let g:ctrlp_match_window = 'results:20'
" let g:ctrlp_bufname_mod = ':~:.:p'
" let g:ctrlp_bufpath_mod = ''

" if executable('ag')
  " " http://robots.thoughtbot.com/faster-grepping-in-vim
  " " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  " let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  " " ag is fast enough that CtrlP doesn't need to cache
  " let g:ctrlp_use_caching = 0
" endif
nmap <leader>t :Files<CR>
nmap <Leader>o :Buffers<CR>
nmap <Leader>T :History<CR>

" Flow
"Use locally installed flow
if filereadable('.flowconfig')
  let g:flow#autoclose = 1
  let g:flow#flowpath = "./node_modules/.bin/flow"
  let g:javascript_plugin_flow = 1
endif

" IndentGuides
let indent_guides_enable_on_vim_startup = 1
if !has("gui_running")
  let g:indent_guides_auto_colors = 0
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=233
endif

" Go
" format with goimports instead of gofmt
let g:go_fmt_command = "goimports"

" " neocomplcache
" let g:neocomplcache_enable_at_startup = 1  " Use neocomplcache.
" let g:acp_enableAtStartup = 0  " Disable AutoComplPop.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" if !exists('g:neocomplcache_force_omni_patterns')
  " let g:neocomplcache_force_omni_patterns = {}
" endif
" let g:neocomplcache_force_omni_patterns.go = '\h\w*\.\?'

" Mix Format
let g:mix_format_on_save = 1
let g:mix_format_options = '--check-equivalent'

" NERDCommenter
let NERDSpaceDelims = 1

" Tagbar
nmap <Leader>r :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1

let g:tagbar_type_elixir = {
    \ 'ctagstype' : 'elixir',
    \ 'kinds' : [
        \ 'f:functions',
        \ 'functions:functions',
        \ 'c:callbacks',
        \ 'd:delegates',
        \ 'e:exceptions',
        \ 'i:implementations',
        \ 'a:macros',
        \ 'o:operators',
        \ 'm:modules',
        \ 'p:protocols',
        \ 'r:records',
        \ 't:tests'
    \ ]
\ }

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }

let g:tagbar_type_make = {
    \ 'kinds':[
        \ 'm:macros',
        \ 't:targets'
    \ ]
\ }

let g:tagbar_type_markdown = {
    \ 'ctagstype' : 'markdown',
    \ 'kinds' : [
        \ 'h:Heading_L1',
        \ 'i:Heading_L2',
        \ 'k:Heading_L3'
    \ ]
\ }

" Scratch
nmap <Leader>d :Sscratch<CR>:q<CR>:b __Scratch__<CR>
nmap <Leader>D :b __Scratch__<CR>:b#<CR>

" Simplenote
if filereadable(expand('~/.simplenoterc'))
  source ~/.simplenoterc
endif
let g:SimplenoteNoteFiletype = 'markdown'
let g:SimplenoteVertical = 1

" Syntastic
let g:syntastic_check_on_open = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_aggregate_errors = 1
if filereadable('.eslintrc') || filereadable('.eslintrc.yaml') || filereadable('.eslintrc.yml') || filereadable('.eslintrc.js')
  let g:syntastic_javascript_checkers = ['eslint']
  let g:syntastic_javascript_eslint_args = ['--fix']
else
  let g:syntastic_javascript_checkers = ['jshint']
  if filereadable('.jscsrc')
    let g:syntastic_javascript_checkers += ['jscs']
  endif
endif
let g:syntastic_erlang_checkers=['syntaxerl']

" HardTime - No arrows
let g:hardtime_default_on = 1
let g:hardtime_maxcount = 2
let g:hardtime_allow_different_key = 1
let g:list_of_normal_keys = ["h", "j", "k", "l", "+", "<UP>", "<DOWN>", "<LEFT>", "<RIGHT>"]
" let g:hardtime_ignore_quickfix = 1

" Source the vimrc file after saving it. This way, you don't have to reload Vim to see the changes.
if has("autocmd")
  augroup myvimrchooks
    au!
    autocmd bufwritepost .vimrc source ~/.vimrc
  augroup END
endif

" Prettier
" autocmd FileType javascript set formatprg=npx\ prettier\ --stdin\ --stdin-filepath\ %
" nnoremap <Leader>gq :normal gggqG<CR>
" nnoremap <leader>gp :silent %!prettier --stdin --stdin-filepath % --trailing-comma all --single-quote<CR>
