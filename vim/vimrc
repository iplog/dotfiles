" Reset vim  to vim-defaults
if &compatible          " only if not set before:
  set nocompatible      " use vim-defaults instead of vi-defaults (easier, more user friendly)
endif

filetype off                   " required!

set rtp+=~/.vim/bundle/neobundle.vim/
call neobundle#begin(expand('~/.vim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required!
NeoBundleFetch 'Shougo/neobundle.vim'

" System
NeoBundle 'Shougo/vimproc.vim', {
  \ 'build' : {
  \     'mac' : 'make -f make_mac.mak',
  \     'unix' : 'make -f make_unix.mak',
  \    },
  \ }
" Navigation and utils
NeoBundle 'Shougo/unite.vim'
NeoBundle 'Shougo/vimfiler.vim'
NeoBundle 'bufkill.vim'
NeoBundle 'majutsushi/tagbar'
NeoBundle 'sjl/vitality.vim'
NeoBundle 'vim-scripts/scratch.vim'
" Edition
NeoBundle 'Shougo/neocomplcache.vim'
NeoBundle 'jiangmiao/auto-pairs'
NeoBundle 'marijnh/tern_for_vim', { 'build': { 'others': 'npm install' } }
NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'scrooloose/nerdcommenter'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'sdanielf/vim-stdtabs'
NeoBundle 'skwp/greplace.vim'
NeoBundle 'tpope/vim-sensible.git'
NeoBundle 'tpope/vim-surround'
" UI
NeoBundle 'Lokaltog/powerline', { 'rtp': 'powerline/bindings/vim/' }
NeoBundle 'iplog/vim-lollipops', { 'script_type' : 'colors' }
" Syntax
NeoBundle 'Blackrush/vim-gocode'
NeoBundle 'ap/vim-css-color'
NeoBundle 'digitaltoad/vim-jade'
NeoBundle 'elzr/vim-json'
NeoBundle 'groenewege/vim-less'
NeoBundle 'heavenshell/vim-jsdoc'
NeoBundle 'kchmck/vim-coffee-script'
NeoBundle 'mattn/emmet-vim'
NeoBundle 'nono/vim-handlebars'
NeoBundle 'othree/html5.vim'
NeoBundle 'pangloss/vim-javascript'
NeoBundle 'smerrill/vcl-vim-plugin'
NeoBundle 'tpope/vim-markdown'
NeoBundle 'wavded/vim-stylus'

call neobundle#end() " Required

" Clear filetype flags before changing runtimepath to force Vim to reload them.
filetype off
filetype plugin indent off
set runtimepath+=$GOROOT/misc/vim

" Enable filetypes. required!
filetype on
filetype plugin on
filetype indent on
syntax on

" Color settings (if terminal/gui supports it)
if $TERM =~ '256color' || $TERM =~ '^xterm$'
  set t_Co=256
endif

if &t_Co > 2 || has("gui_running")
  syntax on          " enable colors
  set hlsearch       " highlight search (very useful!)
  set incsearch      " search incremently (search while typing)
endif

" Display settings
set background=dark     " enable for dark terminals
set scrolloff=2         " 2 lines above/below cursor when scrolling
set number              " show line numbers
" set relativenumber
set showmode            " show mode in status bar (insert/replace/...)
set showcmd             " show typed command in status bar
set ruler               " show cursor position in status bar
set title               " show file in titlebar
set wildmenu            " completion with menu
set wildignore=*.o,*.obj,*.bak,*.exe,*.py[co],*.swp,*~,*.pyc,.svn,.git
set laststatus=2        " use 2 lines for the status bar
set matchtime=2         " show matching bracket for 0.2 seconds
set showmatch           " show matching bracket (briefly jump)
set matchpairs+=<:>     " specially for html

" Color Scheme
set cursorline          " Higlight the current line
colorscheme lollipops

" Editor settings
set colorcolumn=80      " Colum lenght
set esckeys             " map missed escape sequences (enables keypad keys)
set autoindent smartindent      " turn on auto/smart indenting
set smarttab            " smart tab handling for indenting
set magic               " change the way backslashes are used in search patterns
set backspace=indent,eol,start " Allow backspacing over everything in insert mode
set list                " show invisibles
set tabstop=2           " number of spaces a tab counts for
set shiftwidth=2        " spaces for autoindents
set expandtab           " turn a tabs into spaces
set undolevels=10000             " number of forgivable mistakes
set updatecount=100             " write swap file to disk every 100 chars
"set complete=.,w,b,u,U,t,i,d    " do lots of scanning on tab completion
set timeoutlen=3000
set fileformat=unix     " file mode is unix
"set fileformats=unix,dos    " only detect unix file format, displays that ^M with dos files
set diffopt=filler,iwhite       " ignore all whitespace and sync
" set autowrite       "Write the old file out when switching between files.

" Encoding
set encoding=utf-8
set fileencoding=utf-8

" Better line wrapping
set wrap
set textwidth=79
set formatoptions=qrn1

" Enable code folding
set foldenable

" Search options
set ignorecase
set hlsearch
set incsearch
set showmatch
set smartcase           " but become case sensitive if you type uppercase characters

" System settings
set lazyredraw          " no redraws in macros
set confirm             " get a dialog when :q, :w, or :wq fails
"set viminfo=%100,'100,/100,h,\"500,:100,n~/.vim/viminfo
set viminfo='20,\"500   " remember copy registers after quitting in the .viminfo file -- 20 jump links, regs up to 500 lines'
set hidden              " remember undo after quitting
set history=50          " keep 50 lines of command history
set mouse=a             " use mouse in all modes
set mousehide           "Hide mouse when typing
" set splitright          " the new window is created on the right

" Share OS clipboard
set clipboard=unnamed

" Characters list incrementation
set nrformats+=alpha

" Backups
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap// " swap files
set undodir=~/.vim/tmp/undo// " undo files
set backup " enable backup
set undofile " enable undo

" Auto file reloading
set autoread
if !has('gui_running')
  " working thanks to vitality plugin and `set -g focus-events on` in tmux conf
  autocmd FocusGained,BufEnter * :silent! checktime
endif

" File type specifics
" All Trim trailing whitespace when saving a document
autocmd BufWritePre *\(.md\)\@<! :%s/\s\+$//e
" Less
autocmd BufEnter *.less set filetype=less
" Handlebars
autocmd BufEnter *.hjs set filetype=handlebars
" GO
autocmd FileType go autocmd BufWritePre <buffer> Fmt

" Want a different map leader than \
" set mapleader = ","

" Plugins configuration and shortcuts
" System
nmap <leader>ev :tabedit $MYVIMRC<cr>

" IndentGuides
let indent_guides_enable_on_vim_startup = 1
if !has("gui_running")
  let g:indent_guides_auto_colors = 0
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=233
endif

" NERDCommenter
let NERDSpaceDelims = 1

" Tagbar
nmap <Leader>r :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1

" Neocomplcache
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_auto_select = 1
set completeopt-=preview

" Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" autocmd FileType go setlocal omnifunc=go#complete#Complete

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.go = '\h\w*\.\?'

" Scratch
nmap <Leader>d :Sscratch<CR>:q<CR>:b __Scratch__<CR>
nmap <Leader>D :b __Scratch__<CR>:b#<CR>

" Syntastic
let g:syntastic_check_on_open = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_aggregate_errors = 1
let g:syntastic_javascript_checkers = ['jscs', 'jshint']

" Unite
"" Unite Buffet
autocmd FileType unite call s:unite_settings()

"" Unite settings
call unite#custom#profile('default', 'context', {
  \ 'winheight': 15,
  \ 'direction': 'botright',
  \ 'prompt_direction': 'below',
  \ 'cursor_line_highlight': 'CursorLine'
  \ })
call unite#custom#source('file,file/new,buffer,file_rec',
  \ 'matchers', 'matcher_fuzzy')
call unite#custom#source('buffer,file,file_rec', 'sorters', ['sorter_rank'])
call unite#custom#alias('file', 'delete', 'vimfiler__delete')

if executable('ag')
  " Use ag recursive async. Ignore files gitignore
  let g:unite_source_rec_async_command='ag --nocolor --nogroup -g ""'
  " Use ag in unite grep source.
  let g:unite_source_grep_command = 'ag'
  let g:unite_source_grep_default_opts =
    \ '-i --line-numbers --nocolor --nogroup --hidden --ignore ' .
    \  '''.hg'' --ignore ''.svn'' --ignore ''.git'' --ignore ''.bzr'''
  let g:unite_source_grep_recursive_opt = ''
endif

"" Unite mappings
nnoremap <leader>f :<C-u>Unite -buffer-name=Search -no-quit grep:<CR>
nnoremap <leader>F :<C-u>Unite -buffer-name=SearchContext -no-quit grep::-C2<CR>
nnoremap <leader>t :<C-u>Unite -start-insert file_rec/async:!<CR>
nnoremap <leader>o :<C-u>Unite -start-insert buffer bookmark<CR>
nnoremap <leader>ma :<C-u>Unite mapping<CR>

"" Unite functions
function! s:unite_settings()
  imap <buffer> <C-j>   <Plug>(unite_select_next_line)
  imap <buffer> <C-k>   <Plug>(unite_select_previous_line)
  imap <silent><buffer><expr> <C-x> unite#do_action('split')
  imap <silent><buffer><expr> <C-v> unite#do_action('vsplit')
  nmap <buffer> <ESC> <Plug>(unite_exit)
endfunction

" VimFiler
let g:vimfiler_as_default_explorer = 1
call vimfiler#custom#profile('default', 'context', {
  \ 'safe' : 0
  \ })
nnoremap - :VimFilerBufferDir -create<CR>

" No arrows
inoremap <Left>  <NOP>
inoremap <Right> <NOP>
inoremap <Up>    <NOP>
inoremap <Down>  <NOP>
nnoremap <Left>  <NOP>
nnoremap <Right> <NOP>
nnoremap <Up>    <NOP>
nnoremap <Down>  <NOP>

" Source the vimrc file after saving it. This way, you don't have to reload Vim to see the changes.
if has("autocmd")
 augroup myvimrchooks
  au!
  autocmd bufwritepost .vimrc source ~/.vimrc
 augroup END
endif
