" reset vim  to vim-defaults
if &compatible          " only if not set before:
  set nocompatible      " use vim-defaults instead of vi-defaults (easier, more user friendly)
endif

" filetype off                   " required! -> but bug with git

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" let Vundle manage Vundle
" required!
Bundle 'gmarik/vundle'
Bundle 'mileszs/ack.vim.git'
Bundle 'tpope/vim-vinegar'
Bundle 'scrooloose/nerdcommenter'
Bundle 'scrooloose/syntastic'
Bundle 'groenewege/vim-less'
Bundle 'nono/vim-handlebars'
Bundle 'othree/html5.vim'
Bundle 'elzr/vim-json'
Bundle 'tpope/vim-surround'
Bundle 'jiangmiao/auto-pairs'
Bundle 'tpope/vim-sensible.git'
Bundle 'nathanaelkane/vim-indent-guides'
Bundle 'tpope/vim-markdown'
Bundle 'vim-scripts/scratch.vim'
Bundle 'Shougo/neocomplcache.vim'
Bundle 'pangloss/vim-javascript'
Bundle 'bufkill.vim'
Bundle 'kien/ctrlp.vim'
Bundle 'Lokaltog/powerline', {'rtp': 'powerline/bindings/vim/'}
Bundle 'terryma/vim-multiple-cursors'
Bundle 'majutsushi/tagbar'
Bundle 'marijnh/tern_for_vim'
Bundle 'skwp/greplace.vim'
Bundle 'smerrill/vcl-vim-plugin'
Bundle 'ap/vim-css-color'
Bundle 'kchmck/vim-coffee-script'
Bundle 'iplog/vim-lollipops'
Bundle 'sdanielf/vim-stdtabs'
Bundle 'mattn/emmet-vim'
Bundle 'Blackrush/vim-gocode'
Bundle 'wavded/vim-stylus'
Bundle 'digitaltoad/vim-jade'

" Clear filetype flags before changing runtimepath to force Vim to reload them.
filetype off
filetype plugin indent off
set runtimepath+=$GOROOT/misc/vim

" Enable filetypes. required!
filetype on
filetype plugin on
filetype indent on
syntax on

" color settings (if terminal/gui supports it)
if $TERM =~ '256color' || $TERM =~ '^xterm$'
  set t_Co=256
endif

if &t_Co > 2 || has("gui_running")
  syntax on          " enable colors
  set hlsearch       " highlight search (very useful!)
  set incsearch      " search incremently (search while typing)
endif

" display settings
set background=dark     " enable for dark terminals
set scrolloff=2         " 2 lines above/below cursor when scrolling
set number              " show line numbers
" set relativenumber
set showmode            " show mode in status bar (insert/replace/...)
set showcmd             " show typed command in status bar
set ruler               " show cursor position in status bar
set title               " show file in titlebar
set wildmenu            " completion with menu
set wildignore=*.o,*.obj,*.bak,*.exe,*.py[co],*.swp,*~,*.pyc,.svn,.git
set laststatus=2        " use 2 lines for the status bar
set matchtime=2         " show matching bracket for 0.2 seconds
set showmatch           " show matching bracket (briefly jump)
set matchpairs+=<:>     " specially for html

" editor settings
set colorcolumn=80      " Colum lenght
set esckeys             " map missed escape sequences (enables keypad keys)
set autoindent smartindent      " turn on auto/smart indenting
set smarttab            " smart tab handling for indenting
set magic               " change the way backslashes are used in search patterns
set backspace=indent,eol,start " Allow backspacing over everything in insert mode
set list                " show invisibles
set tabstop=2           " number of spaces a tab counts for
set shiftwidth=2        " spaces for autoindents
set expandtab           " turn a tabs into spaces
set undolevels=10000             " number of forgivable mistakes
set updatecount=100             " write swap file to disk every 100 chars
"set complete=.,w,b,u,U,t,i,d    " do lots of scanning on tab completion
set timeoutlen=3000
set fileformat=unix     " file mode is unix
"set fileformats=unix,dos    " only detect unix file format, displays that ^M with dos files
set diffopt=filler,iwhite       " ignore all whitespace and sync
" set autowrite       "Write the old file out when switching between files.

" encoding
set encoding=utf-8
set fileencoding=utf-8

" Better line wrapping
set wrap
set textwidth=79
set formatoptions=qrn1

" Enable code folding
set foldenable

" Search options
set ignorecase
set hlsearch
set incsearch
set showmatch
set smartcase           " but become case sensitive if you type uppercase characters

" system settings
set lazyredraw          " no redraws in macros
set confirm             " get a dialog when :q, :w, or :wq fails
"set viminfo=%100,'100,/100,h,\"500,:100,n~/.vim/viminfo
set viminfo='20,\"500   " remember copy registers after quitting in the .viminfo file -- 20 jump links, regs up to 500 lines'
set hidden              " remember undo after quitting
set history=50          " keep 50 lines of command history
set mouse=a             " use mouse in all modes
set mousehide           "Hide mouse when typing
" set splitright          " the new window is created on the right

" Share OS clipboard
set clipboard=unnamed
if $TMUX == ''
  set clipboard+=unnamed
endif

" characters list incrementation
set nrformats+=alpha

" Backups
set backupdir=~/.vim/tmp/backup// " backups
set directory=~/.vim/tmp/swap// " swap files
set undodir=~/.vim/tmp/undo// " undo files
set backup " enable backup
set undofile " enable undo

" auto file reloading
set autoread

" Color Scheme
set cursorline          " Higlight the current line
colorscheme lollipops

" File type specifics
" All Trim trailing whitespace when saving a document
autocmd BufWritePre *\(.md\)\@<! :%s/\s\+$//e
" Less
autocmd BufEnter *.less set filetype=less
" hogan
autocmd BufEnter *.hjs set filetype=handlebars
" GO
autocmd FileType go autocmd BufWritePre <buffer> Fmt

" no arrows
inoremap <Left>  <NOP>
inoremap <Right> <NOP>
inoremap <Up>    <NOP>
inoremap <Down>  <NOP>
nnoremap <Left>  <NOP>
nnoremap <Right> <NOP>
nnoremap <Up>    <NOP>
nnoremap <Down>  <NOP>

" Want a different map leader than \
" set mapleader = ","

"Shortcut for editing  vimrc file in a new tab
nmap <leader>ev :tabedit $MYVIMRC<cr>

" Ack
nmap <Leader>f :Ack<space>

" Plugins configuration
" always start indent guides
let indent_guides_enable_on_vim_startup = 1
if !has("gui_running")
  let g:indent_guides_auto_colors = 0
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=233
endif

" use a space in coments
let NERDSpaceDelims = 1

" ctrlp
nmap <Leader>t :CtrlP<CR>
nmap <Leader>o :CtrlPBuffer<CR>
nmap <Leader>T :CtrlPClearCache<CR>:CtrlP<CR>
let g:ctrlp_match_window = 'results:20'

" tagbar
nmap <Leader>r :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_autoclose = 1

" neocomplcache
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_auto_select = 1
set completeopt-=preview

" Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
" autocmd FileType go setlocal omnifunc=go#complete#Complete

" Enable heavy omni completion.
if !exists('g:neocomplcache_omni_patterns')
  let g:neocomplcache_omni_patterns = {}
endif
let g:neocomplcache_omni_patterns.go = '\h\w*\.\?'

" Scratch
nmap <Leader>d :Sscratch<CR>:q<CR>:b __Scratch__<CR>
nmap <Leader>D :b __Scratch__<CR>:b#<CR>

" Syntastic
let g:syntastic_check_on_open = 1
" let g:syntastic_auto_jump = 1
let g:syntastic_always_populate_loc_list = 1

" Source the vimrc file after saving it. This way, you don't have to reload Vim to see the changes.
if has("autocmd")
 augroup myvimrchooks
  au!
  autocmd bufwritepost .vimrc source ~/.vimrc
 augroup END
endif
